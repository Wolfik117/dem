Функция ПроверкаВыбораТранспортногоСредства() Экспорт
	успешнаяЗагрузка = Истина;

		Если НЕ ЗначениеЗаполнено(Автомобиль) Тогда
		Сообщить("[Ошибка] Транспортное средство не выбрано.");
		успешнаяЗагрузка = Ложь;
		КонецЕсли;
	
	Возврат УспешнаяЗагрузка;
КонецФункции
	
Функция ПроверкаГабаритовАвтомобиля() Экспорт
	успешнаяЗагрузка = Истина;

	Если Автомобиль.ГрузоподъемностьВТоннах = 0 Тогда
		Сообщить("[Ошибка] Свойство грузоподъемности автомобиля не заполнено");
		успешнаяЗагрузка = Ложь;
	КонецЕсли;
	Если Автомобиль.ВместимостьВКубическихМетрах = 0 Тогда
		Сообщить("[Ошибка] Свойство объема автомобиля не заполнено");
		успешнаяЗагрузка = Ложь;
	КонецЕсли;
	
	Возврат УспешнаяЗагрузка;
КонецФункции
	
функция ПроверкаГабаритовТовара() Экспорт
	успешнаяЗагрузка = Истина;
	списокТоваровВТаблице = Объект.Товары;
	
	для Каждого товарТаблицы Из списокТоваровВТаблице Цикл
		вес = товарТаблицы.Количество * товарТаблицы.Номенклатура.ВесЧислитель;
		объем = товарТаблицы.Количество * товарТаблицы.Номенклатура.ОбъемЧислитель;
		Если вес = 0 Тогда
			Сообщить("[Ошибка] Вес товара (" + товарТаблицы.Номенклатура + ") не заполнен");
			успешнаяЗагрузка = Ложь;
			Возврат(успешнаяЗагрузка);
		КонецЕсли;
		Если объем = 0 Тогда
			Сообщить("[Ошибка] Объем товара (" + товарТаблицы.Номенклатура + ") не заполнен");
			успешнаяЗагрузка = Ложь;
			Возврат(успешнаяЗагрузка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат УспешнаяЗагрузка;

КонецФункции

Функция ПроверкаВесаОбъема() Экспорт
	УспешнаяЗагрузка = Истина;
	
	общийВес = 0;
	общийОбъем = 0;
	
	списокТоваровВТаблице = Объект.Товары;
	
	для Каждого товарТаблицы Из списокТоваровВТаблице Цикл
		вес = товарТаблицы.Количество * товарТаблицы.Номенклатура.ВесЧислитель;
		объем = товарТаблицы.Количество * товарТаблицы.Номенклатура.ОбъемЧислитель;
		общийВес = общийВес + вес;
		общийОбъем = общийОбъем + объем;
	КонецЦикла;
	
	Сообщить("[Информация] Общий вес товаров: " + общийВес); 
	Сообщить("[Информация] Общий объем товаров: " + общийОбъем); 
	
	максВесВыбранногоАвто = Автомобиль.ГрузоподъемностьВТоннах; 
	максОбъемВыбранногоАвто = Автомобиль.ВместимостьВКубическихМетрах; 
	
	Если ОбщийВес > максВесВыбранногоАвто или общийОбъем > максОбъемВыбранногоАвто Тогда		
	Сообщить("[Ошибка] Товары не умещаются в выбранное транспортное средство. Макс. вес: " + максВесВыбранногоАвто + " Макс. объем: " + максОбъемВыбранногоАвто); 
	УспешнаяЗагрузка = Ложь;
	КонецЕсли;

Возврат УспешнаяЗагрузка;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервереРасширение(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	общаяПроверка = ПроверкаВыбораТранспортногоСредства() И ПроверкаГабаритовАвтомобиля() И ПроверкаГабаритовТовара() И ПроверкаВесаОбъема();
	
	Если общаяПроверка = Ложь Тогда
		Сообщить("[Информация] Проведение не завершено");
		Отказ = Истина;
		Возврат; 
	КонецЕсли;
		
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	// ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") Тогда
		Документы.ТранспортнаяНакладная.СохранитьРеквизитыТОРГ12ПередЗаписью(ЭтаФорма);
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры   

&НаСервере
Процедура ПослеЗаписиНаСервереРасширение(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьОтклоненияОтЗаказа();
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ИзменитьЗаголовкиПоВариантуОформленияПродажи();
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	СформироватьТекстДокументаЕГАИС();
	// Конец ИнтеграцияЕГАИС
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") Тогда
		Документы.ТранспортнаяНакладная.СравнитьРеквизитыТОРГ12ПослеЗаписи(ЭтаФорма);
	КонецЕсли;
	ТекущийСпособДоставки = ТекущийОбъект.СпособДоставки;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	Сообщить("[Информация] Успешное проведение");
КонецПроцедуры
